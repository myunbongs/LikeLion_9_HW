# 제어문: 코드의 흐름을 제어하는 문법. 분기문/반복문

# 분기문: 컴퓨터에게 선택의 여지와 조건을 부여

# if 문
# if 
#   조건이 참일 때

# 예제 1: 85점 이상이면 PASS, 미만이면 FAIL (부등호 연산자)

# score = int(input("점수를 입력해주세요."))

# if(score >= 85):
#     print("PASS")
# else:
#     print("FAIL")


# 예제 2 (== 일치여부)

# activity = input("너 동아리 뭐해?")
# if (activity == "멋쟁이사자처럼"):
#     print("어, 너도 멋사야?")
# else:
#     print("..그래...ㅎㅎ")


# 예제 3: 5000 이상 아웃백, 3000 이상 학식, 1000 이상 컵라면, ㅠㅠ 공기밥

money = int(input("돈 얼마 있어?"))

# if(money>= 5000):
#     print("아웃백 가자")
# else:
#     if(money>=3000):
#         print("학식 먹자")
#     else:
#         if(money>=1000):
#             print("컵라면 먹자")
#         else:
#             print("공기밥 가즈아ㅏㅏㅏ")

# else if = elif
if(money>= 5000):
    print("아웃백 가자")
elif(money>=3000):
    print("학식 먹자")
elif(money>=1000):
    print("컵라면 먹자")
else:
    print("공기밥 가즈아ㅏㅏㅏ")


# 반복문 for, while

# for 문(이를 반복하세요.)
# for 반복제어변수 in 반복대상:
#   반복 실행할 코드

# 반복대상이란.
# 예를 들어, 우리반 학생 평균 성적을 구할 때
# 우리반 학생성적을 반복해서 더해준 뒤 학생 수 만큼 나눈다. 이때 반복대상은 우리반 학생성적

# 반복대상에는 리스트, 튜플, 문자열 등이 올 수 있음

# for score in [96, 98, 100, 88]
#    print(score)

# range(x,y) 함수: x 이상, y 미만의 수를 리스트로 반환해주는 함수


# while 문(이 조건을 만족하는 동안 반복하세요.)

# num = 10
# while (num>0):
#     print("반복 수행 중!")

# 이 while 문은 10번 반복됨.

# while 문 조건이 영원히 true 이면 무한루프

# 반복문을 무조건 빠져나가게 해주는 명령어: break



# 함수: 코드를 기능으로 묶은 단위. 코드의 기능 단위. 길고 복잡한 코드를 기능별로 나눠서 단순하게 만들어주는 문법
# def 함수이름(인자):
#     실행코드
#     리턴값

# 인자
# def function(x, y):
#   ...
#
# function(num1, num2)
# 여러개의 인자를 넣어줄 수 있음.

# 리턴값: 함수가 제 기능을 다 한 결과. 무조건 하나 혹은 없음.
# 인자는 여러 개이지만, 리턴값은 하나. 함수는 코드를 기능적으로 분류한 단위이기 때문에 한 기능이 실행되면 그 기능의 결과는 하나이어야 함.(리턴값이 없을 수도 있음. 예. 프로그램 종료 함수)

# 함수의 안과 밖: 변수의 범위
# 함수의 내부는 함수만의 세상. 함수 안의 변수는 이 함수에서만 쓰임
#
# 지역변수: 함수 안에서 선언된 함수(독립적)
# 전역변수: 코드 전체의 영역에서 영향력을 갖는 함수. global 키워드를 붙여서 사용. 가급적 사용하지 않아야 함.(영역 구분이 제대로 되지 않기 때문)
#
# 개발 시, 주로 지역변수를 사용할 것.